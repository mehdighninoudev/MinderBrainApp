
import 'dart:convert';

import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:intl/intl.dart';
import 'package:minderbrain/Widgets/UpdateTaskScreen/UpdateTaskScreen.dart';

import 'package:minderbrain/Widgets/VoirTaches/TaskModel.dart';


class TaskCompletedScreen extends StatefulWidget {
  @override 
  _TaskCompletedScreen createState() => _TaskCompletedScreen();
}

class _TaskCompletedScreen extends State<TaskCompletedScreen> {
  User? user;
  DatabaseReference? taskRef;

  @override
  void initState() {
    user = FirebaseAuth.instance.currentUser;
    if(user != null) {
      taskRef = FirebaseDatabase.instance.reference().child('tasks').child(user!.uid);
    }
    super.initState();
  }

  @override 
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("MinderBrain App"),

      ),
      body: SafeArea( 
        child: SingleChildScrollView(child: Column(children: [
          Center(
            child: Image.asset('images/logo.png'),
          ),

          Center( child: Text("Voir Tache", 
                    style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blueGrey, fontSize: 22.0),),
          ),

          StreamBuilder<DatabaseEvent>(stream: taskRef != null ? taskRef!.onValue : null, 
          builder: (context, snapshot){
            if(snapshot.hasData && !snapshot.hasError){
              var event = snapshot.data as DatabaseEvent;
              var snapshot2 = event.snapshot.value;
              if(snapshot2 == null) {
                return Center(child:Text("Pas de taches ajoutees"),);
              }

              Map<dynamic, dynamic> map = snapshot2 as Map<dynamic, dynamic>;
             //Map<String, dynamic> map = snapshot2;
             //Map<String, dynamic> map = Map<String, dynamic>.from(snapshot2);
            // Map<String, dynamic> map = new Map<String, dynamic>.from(json.decode(snapshot2 as String));
              var tasks = <TaskModel>[];

              for(var taskMap in map.values){
                //TaskModel taskModel = TaskModel.fromMap(Map<String, dynamic>.from(taskMap));
                /*if(){
                  TaskModel taskModel = TaskModel.fromMap(Map<String, dynamic>.from(taskMap));
                  tasks.add(taskModel);
                }*/

                if(taskMap["completed"] == '1'){
                 TaskModel taskModel = TaskModel.fromMap(Map<String, dynamic>.from(taskMap));
                 tasks.add(taskModel);
                }

                
                //tasks.add(taskModel);
              }

              
            

              //return Center(child: Text(tasks.length.toString()),);
              return Padding(
                padding: const EdgeInsets.all(8.0),
                child: ListView.builder(
                  scrollDirection: Axis.vertical,
                  shrinkWrap: true,
                  itemCount: tasks.length,itemBuilder: (context, index){
                  TaskModel task = tasks[index];
                  return Container(
                    padding: EdgeInsets.all(10),
                    margin: EdgeInsets.only(bottom:10),

                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black, width: 1),
                     ),
                    child: Column(
                      
                      children: [
                      
                      Text(task.taskName),
                      Text(getHumanReadableDate(task.dt)),

                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                        IconButton(icon: Icon(Icons.delete), onPressed: () {
                          showDialog(context: context, builder:(ctx){
                            return AlertDialog(
                              title: Text("Confirmation !!!"),
                              content: Text("Ar you sure to delete ?"),
                              actions: [
                                TextButton(onPressed: () {
                                  Navigator.of(context).pop();
                                } , child: Text("Non")),
                                TextButton(onPressed: () async {
                                  
                                  if(taskRef != null) {
                                    await taskRef!.child(task.taskId).remove();
                                  }
                                  Navigator.of(ctx).pop();


                                }, child: Text("Oui")),
                              ],
                            );
                          });
                        },),
                        IconButton(icon: Icon(Icons.edit), onPressed: () {

                          Navigator.of(context).push(MaterialPageRoute(builder: (context){
                            return UpdateTaskScreen(task: task);
                          }));
                        },),
                      ],)
                      
                    ],)
                  );
                }),
              );
            }  else {
              return Center(child: CircularProgressIndicator(),);
            }
          },)


        ],))
        
        ,
      ),
    );
  }

  String getHumanReadableDate(int dt) {
    DateTime dateTime = DateTime.fromMillisecondsSinceEpoch(dt);
    return DateFormat('dd MMM yyy').format(dateTime);
  }
}